apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt' // keep here and in this order or Dagger will screw up

/**
 *
 * Overwrite master with some_branch
 *
 git checkout some_branch
 git merge -s ours master
 git checkout master
 git merge some_branch
 *
 */
android {

    compileSdkVersion 28
    defaultConfig {
        applicationId "cleanarcpro.brightowusu.com.cleanarcproj"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }


    buildTypes {


        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    // Specifies one flavor dimension.
    flavorDimensions "version"
    productFlavors {
        prod {
            dimension "version"
        }
        mockServer {
            dimension "version"
            applicationIdSuffix = ".mock"
        }
    }
}

// to avoid error Could not resolve androidx.arch.core:core-common:{strictly 2.0.1}.
// Cannot find a version of 'androidx.arch.core:core-common' that satisfies the version constraints:
configurations.all
        {
            resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'androidx.arch.core'
                        && !details.requested.name.contains('core-runtime')) {
                    details.useVersion "2.0.1"
                }

            }
        }


dependencies {

    def supportLibVersion = '27.1.1'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':domain')
    // unfortunately, we cannot create a separate di module that would ideally point to
    // presentation layer as a dependency. This di module would be then able to provide all dependencies
    // to presentation, domain and data. As an Android workaround we point the presentation layer to the
    // data layer so that dependicies can be provided
    implementation project(':data')

    androidTestImplementation project(':testutils')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.1'

    testImplementation 'junit:junit:4.12'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testImplementation 'androidx.arch.core:core-testing:2.1.0-rc01'

    // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.0'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0-rc01'



    // Dagger for DI
    implementation "com.google.dagger:dagger:2.16"
    annotationProcessor "com.google.dagger:dagger-compiler:2.16"

    implementation 'com.google.dagger:dagger-android:2.16'
    implementation 'com.google.dagger:dagger-android-support:2.16'
    // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.16'

    kapt "com.google.dagger:dagger-compiler:2.16"
    kapt "com.google.dagger:dagger-android-processor:2.16"

    // https://github.com/square/okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$rootProject.archLifecycleVersion"

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'

    // Circular Progressbar libary
    implementation 'com.github.castorflex.smoothprogressbar:library-circular:1.2.0'

    // Picasso
    implementation 'com.squareup.picasso:picasso:2.5.2'

    // Kotlin coroutines view model scope
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha03'

    // Steho
    implementation 'com.facebook.stetho:stetho:1.5.0'

}
